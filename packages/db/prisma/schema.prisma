// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String    @id @default(uuid()) @db.Uuid
    email             String    @unique
    verfied           Boolean   @default(false)
    suspended         Boolean   @default(false)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    verificationEmail DateTime?
    google            Boolean   @default(false)
    googleaccountId   String?
    apple             Boolean   @default(false)
    appleaccountId    String?
    appleId           String?
    //
    friends           User[]    @relation("UserFriends")
    symmetricFriends  User[]    @relation("UserFriends")
    //
    username          String?   @unique
    //
    posts             Post[]    @relation("author")
    likes             Post[]    @relation("likes")
    mylikes           Post[]    @relation("mylikes")
    //
    friendRequest     Request[] @relation("reciver")
    requestSent       Request[] @relation("sender")
}

model Post {
    id        String    @id @default(uuid()) @db.Uuid
    body      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    //
    authorId  String    @db.Uuid
    author    User      @relation("author", fields: [authorId], references: [id])
    //
    likes     User[]    @relation("likes")
    mylikes   User[]    @relation("mylikes")
    //
    comments  Comment[]
}

model Comment {
    id        String   @id @default(uuid()) @db.Uuid
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    //
    Post      Post     @relation(fields: [postId], references: [id])
    postId    String   @db.Uuid
}

///
model Admin {
    id       String @id @default(uuid()) @db.Uuid
    email    String @unique
    name     String
    password String
}

model Request {
    id        String         @id @default(uuid()) @db.Uuid
    status    Request_Status @default(PENDING)
    //
    sender    User           @relation("sender", fields: [senderId], references: [id])
    senderId  String         @db.Uuid
    //
    reciver   User           @relation("reciver", fields: [reciverId], references: [id])
    reciverId String         @db.Uuid
}

enum Request_Status {
    PENDING
    CANCELED
    DECLINED
    ACCEPTED
    REMOVED
}
